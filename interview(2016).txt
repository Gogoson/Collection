1、ES6新特性
   1) let:声明的变量具有块级作用域，避免污染作用域外的同名变量，避免循环变量泄露成为全局变量
   2) const:声明的是常量,如果常量被进行赋值操作，则报错，一般用在引入第三方库时，作为全局使用。
      例如：const jQuery = require('jQuery');
   3) class, extends, super的引入改写了ES5中使用原型链来实现继承的方式，变得更加简洁明了
      例如：
            class Animal {
                 constructor(){
                     this.type = 'animal';
                 }
                 says(say){
                     console.log(this.type + ' says ' + say);
                 }
            }

            let animal = new Animal();
            animal.says('hello') ;//animal says hello

            class Cat extends Animal {
                 constructor(){
                     super(); //如果不调用super方法，子类继承不了父类的this对象
                     this.type = 'cat';
                 }
            }

            let cat = new Cat();
            cat.says('hello'); //cat says hello   
   4)arrow function 箭头函数，简洁是第一特性，第二特性是解决this指向问题，在ES5中调用对象里的方法时，
     经常要注意this的指向问题，在箭头函数中它指向的是定义时的上下文对象，而不是运行时的上下文对象。
     例如：
          function(i){ return i + 1; } //ES5
          (i) => i + 1 //ES6  

   5)template string 模板字符串，用反引号(`)来标识起始，用${}来引用变量，空格和缩进都会被保留在输出之中
     例如：
          $("#result").append(`
            There are <b>${basket.count}</b> items
            in your basket, <em>${basket.onSale}</em>
            are on sale!
           `);
   6)destructuring 解构
     数组解构：
     var [a, b, c=3] = [1, 2];  // a = 1; b = 2; c = 3;
     数组解构一般用于赋值，特别是调用函数返回多个数值要分别赋值给不同的变量。
     对象解构：
     let dog = {type: 'animal', many: 2};
     let { type, many} = dog;  //type='animal'; many=2;
     对象解构一般用于定义函数的参数，良好的API参数一般都是用一个对象来进行传递，不用记住参数的顺序

   7)default 函数参数默认值
     function animal(type = 'cat'){
        console.log(type)
     }
     animal();
    8)rest  ...a ：把剩下的参数归集到a中，它是个数组，你懂的啦
      例如：
      'use strict';  
       function func(a,b,...args){  
           console.log(args);
       }  
       func(1,2,3,4); //[3,4]  

2、css3
   box-shadow: X轴偏移量 Y轴偏移量 阴影模糊半径 阴影扩展半径 阴影颜色 投影方式(可以设置inset为向内投影)
   text-shadow:X轴偏移量 Y轴偏移量 阴影模糊半径 阴影颜色
   1）以上两个属性可以用于IE9+，属性值中阴影模糊半径不能为负值，为负值则没有任何shadow效果。
   2）以上两个属性都可以设置多个shadow效果，以逗号隔开即可。
   3）box-shadow属性可以产生跟margin类似的效果，但是box-shadow不影响盒子模型。
   4）box-shadow直接在img元素上使用inset是没有任何效果的，可以利用img的父层容器或者父容器的:after伪元素实现
   5）当给同一个元素使用多个阴影属性时，需要注意它的顺序，最先写的阴影将显示在最顶层。
   6）整个层级：边框>内阴影>背景图片>背景颜色>外阴影

   border-radius:10px / 20px 
   表示圆角水平半径是10px,垂直半径是20px。
   border-radius:10px 20px 
   表示border-top-left-radius 和 border-bottom-right-radius是10px,其余角是20px,跟border一样遵循TRBL原则。

   background:-webkit-linear-gradient(top,#FFF 50%,#999,green ,#000);
   top表示从上到下渐变颜色，#FFF是起始颜色，#000是终止颜色，中间的颜色可以选，50%表示#FFF占据背景色一般然后在进行渐变

3、只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。   

4、CMD
   1)在 CMD 规范中，一个模块就是一个文件，define是一个全局函数，用来定义模块。
   2)define 接受 factory 参数，factory 可以是一个函数，也可以是一个对象或字符串。
   3)factory 为函数时，表示是模块的构造方法，默认会传入三个参数：require、exports 和 module
     define(function(require, exports, module) {
           // 模块代码
     });
   4)define(id?, deps?, factory)
     注意：带 id 和 deps 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。
   5)模块 factory 构造方法的第一个参数必须命名为 require
   6)require 的参数值必须是字符串直接量
   7)require.async 方法用来在模块内部异步加载模块，并在加载完成后执行指定回调。callback 参数可选
     define(function(require, exports, module) {
        // 异步加载一个模块，在加载完成时，执行回调
        require.async('./b', function(b) {
        b.doSomething();
      });

       // 异步加载多个模块，在加载完成时，执行回调
       require.async(['./c', './d'], function(c, d) {
       c.doSomething();
       d.doSomething();
      });

    });
    require.async 一般用来加载可延迟异步加载的模块。
   8)传给 factory 构造方法的 exports 参数是 module.exports 对象的一个引用
     向外提供接口可以用 module.exports = {} 或者 exports.XXX = XXX 或者 return {}
     不能这样用：
     exports = {} 、module.exports = function(){}、return function(){}
   9)对 module.exports 的赋值需要同步执行，不能放在回调函数里
   10)exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变
     module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口
  11)用seajs.config进行配置:
      seajs.config({
        // 设置路径，方便跨目录调用
        paths: {
          'arale': 'https://a.alipayobjects.com/arale',
          'jquery': 'https://a.alipayobjects.com/jquery'
        },
        
        // 设置别名，方便调用
        alias: {
          'class': 'arale/class/1.0.0/class',
          'jquery': 'jquery/jquery/1.10.1/jquery'
        }
      });  
   12)seajs.use用来在页面中加载一个或多个模块: 
      // 加载一个模块
      seajs.use('./a');

      // 加载一个模块，在加载完成时，执行回调
      seajs.use('./a', function(a) {
        a.doSomething();
      });

      // 加载多个模块，在加载完成时，执行回调
      seajs.use(['./a', './b'], function(a, b) {
        a.doSomething();
        b.doSomething();
      });     
5、AMD && requireJs
   AMD规范只定义了一个函数 define 。
   define(id?, dependencies?, factory);
   require()函数接受两个参数。第一个参数是一个数组，第二个参数是一个回调函数。
   require.config()使用paths指定路径，可以设置baseUrl，这是全局的，后面如果加载的模块没有指定路径，
   默认取baseUrl。
   shim用来加载非规范的模块。
   AMD是依赖前置，所有的依赖全部加载完了，才会执行回调
   // math.js
　　define(function (){
　　　　var add = function (x,y){
　　　　　　return x+y;
　　　　};
　　　　return {
　　　　　　add: add
　　　　};
　　});

   require(['math'], function (math){
　　　　alert(math.add(1,1));
　　});
    
    AMD也可以写出简洁的commonJS的形式，但是本质上，所有依赖还是会前置执行了，本质还是AMD。
6、兼容问题
   1）IE8不支持字符串的trim、indexOf函数
   2）IE8基本上不支持CSS3属性border-radius、box-shadow、text-shadow
   3）IE8不支持这些CSS3选择器：
      :last-child 、:nth-child(n)、:first-of-type、:last-of-type
   4）color: green\0;只有IE8才能识别。
   5）opacity属性，在IE8要用alpha通道才能实现，例如
      filter: alpha(opacity=20);相当于 opacity:0.2
   6）IE hack和IE条件注释
   7）ie8css3圆角的实现使用PIE.htc，behavior: url(../../../public/css/PIE.htc);
      注意：这个路径是html相对于PIE的路径
7、招商信诺面试：
   闭包用在哪里
   promise是怎样的
   移动端手机键盘事件能获取吗
   移动端输入框跟随键盘变动怎么实现
   H5有哪些新特性，用在哪里
   sass和less的区别是什么
   移动端你会怎么选择js框架
   浏览器兼容了解怎样
   手机浏览器兼容了解哪些
   移动端自适应怎么做
   用过angular框架吗
   用过哪些大的框架
   css的权重
   jQuery怎么选择一个文本内容
   requirejs和seajs有什么区别
   性能优化有哪些可以做的

8、sass和less的区别
   1）两者都是CSS的预处理器，方便我们编写css
   2）Sass 和 Less 都使用的是标准的 CSS 语法
   3）Sass 的变量必须是 $ 开始， Less 的变量名使用 @ 符号开始
   4）嵌套使得父子节点关系一目了然，嵌套语法都一样
   5）对于混合（mixin）（类似函数功能）
      sass语法是
		@mixin border-radius($values) {
		  -webkit-border-radius: $values;
		     -moz-border-radius: $values;
		          border-radius: $values;
		}
		  
		div {
		  @ include border-radius(10px);
		}
      less语法是
		.border-radius(@values) {
		  -webkit-border-radius: @values;
		     -moz-border-radius: @values;
		          border-radius: @values;
		}
		  
		div {
		  .border-radius(10px);
		}
   6）继承
      sass用.selector {@extend .block;}，sass会形成分组
      less用.selector {.block;}，less直接把继承的样式插入代码中
   7）导入
      导入文件中定义的混入、变量等信息也将会被引入到主样式文件中，因此需要避免它们互相冲突。
      @ import "reset.css";
   8）Sass 有两种语法
      以.scss 扩展名，能理解大多数 CSS hacks 以及浏览器专属语法，例如IE 古老的 filter 语法。
      以.sass 扩展名，不使用花括号，而是通过缩排的方式来表达选择符的嵌套层级，而且也不使用分号，
      而是用换行符来分隔属性
    9）less的混合和继承有点类似，不同的是混合用的是自定义的名字，还可以传参数，继承则用的是选择器，没有参数可选
    10）都带有函数，比如颜色函数lighten(@base, 25%)

9、性能优化
   js:
   1）动画使用绝对定位，避免重排和重绘
   2）使用事件委托来减少事件处理器的数量
   3）能使用原始的API时尽量使用，比如maths函数，querySelectorAll()
   4）缓存集合和长度
   5）批量修改样式，降低重排和重绘的次数
   6）避免使用eval()，因为会带来双重求值的性能消耗
   7）尽量使用直接量创建对象和数组，直观，代码量少，创建和初始化要快
   8）避免使用for in循环，除非你要遍历一个属性数量未知的对象，因为for in 操作会同时搜索实例或原型属性。
   9）缓存循环体长度，倒叙循环，把减法操作放在控制条件中
   10）if else条件尽量把最可能出现的条件放在首位

   css:
   1）避免层级或过度限制的CSS
   2）避免后代选择器
   3）避免适用通配符
   4）避免甚至不要使用CSS表达式

   其他：
   1）避免重定向
   2）减少http请求，合并脚本和样式文件，内联图片，合并多张小图
   3）使用外部Javascirpt和CSS文件，经常访问的页面会有缓存，但是不常访问的页面就用内联样式
   4）前端资源添加过期日期，expires或者cache-control报文头
   5）配置Etag文件实体标签，避免下载全部的文件，返回304文件头就可以了
   6）样式文件放头部，脚本放在底部，对显示无特别重要的脚本，可以延迟加载
   7）提前加载
   8）混动加载或者延迟加载

10、HttpOnly 与 secure
    1）如果在Cookie中设置了"HttpOnly"属性，那么通过程序(JS脚本、Applet等)将无法读取到Cookie信息，
    这样能有效的防止XSS攻击。
    2）secure属性设置为true时，只能在 HTTPS 连接中被浏览器传递到服务器端进行会话验证，防止信息在传递
    的过程中被监听捕获后信息泄漏。
    3）cookie默认的有效期只能持续在浏览器的回话期间（即是说，默认的有效期与浏览器进程挂钩而不是浏览器单个窗口），
    一旦用户关闭浏览器，cookie保存的数据就丢失了。

11、平安产险与富途证券的面试记录
    浏览器为什么限制跨域
    原生的事件委托怎么写
    用js怎么实现promise
    怎么判断一个有序数组是另一个有序数组的子集，要求降低算法复杂度
    正则的贪婪匹配和非贪婪匹配是怎样的
    git保留当前未完成的分支，怎么与其他人的分支合并
    web安全问题
    css文件会阻塞吗
    脚本会阻塞吗，为什么，依然放在头部，怎么做才能不阻塞

12、冒泡、捕获是相对于目标元素而言的
    document.body.addEventListener("click", function(event){
      alert(event.eventPhase);  
    }, true); 

    点击body元素，显示2，表示事件发生在目标上（下面两种写法对这个不影响）。
    点击body的后代元素，显示1，表示事件发生是在捕获阶段，因为第三个参数为true。
    最后一个参数默认是false，true表示事件句柄在捕获阶段执行，false表示事件句柄在冒泡阶段执行。

    document.body.addEventListener("click", function(event){
      alert(event.eventPhase);  //这个时候，如果点击body的后代元素，则显示3，表示事件在冒泡阶段执行了。
    }, false); 

    对于另外一种写法，则默认是冒泡阶段执行：
    document.body.onclick = function(event){
      alert(event.eventPhase);  //点击body的子元素，显示3
    }    

    因为IE不支持事件捕获，所以建议统一在冒泡阶段处理事件句柄。
    另外，IE8浏览器不支持addEventListener()，可以使用attachEvent()。

    事件类型没有on，false 表示在事件第三阶段（冒泡）触发，true表示在事件第一阶段（捕获）触发。 如果handle是同一个方法，只执行一次。解绑事件，参数和绑定一样
    ele.addEventListener('click', function(){ }, false);  
    ele.removeEventListener(event.type, handle, boolean); 

    ele.attachEvent('onclick', function(){ }); //IE8-
    ele.detachEvent("onclick", function(){ });//IE8-

    event.preventDefault( );         
    event.returnValue = false;       //阻止默认事件 IE8-   

    event.stopPropagation( );    // 阻止事件的进一步传播，包括（冒泡，捕获），无参数
    event.cancelBubble = true;   // true 为阻止冒泡  IE8-

    原生js写事件委托的时候，IE是没有e.target，有e.srcElement

13、同源策略与跨域
    协议、域名、端口相同即视为同源（同域） 
    不同域的客户端脚本在没明确授权的情况下，不能读写对方的资源。这种安全限制称为同源策略。
    为什么要有同源策略呢：
    1）这是浏览器的对于安全性而进行的规定。
    2）但是出于方便性，这个策略没有很严格执行，比如img，script，link标签就可以跨域获取资源，
       但只是获取，而不能对对方的资源进行修改。
    3）如果没有同源策略，所有网站都可以互相ajax，都可以轻松获取别人的cookie，安全完全没有保障了。

    对于跨域
    1）如果互相访问的域属于二级子域，可以通过设置document.domain为一级域名来进行跨域通讯。
    2）window.name，缺点是必须监听子窗口window.name属性的变化，影响网页性能。
    3）使用jsonp来实现，这不是通过XHR对象来实现的，而是通过创建动态脚本标签来实现的，但是
       服务器也要做响应的设置，把数据包裹在回调函数体内返回给客户端。只能get请求 。
    4）通过html5中的方法postMessage来实现
    5）cors跨域资源共享，通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问
       的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。
       例如在服务器端设置：
       Access-Control-Allow-Origin: example.com
       Access-Control-Request-Method: GET, POST
       Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin
       Access-Control-Expose-Headers: Content-Range
       Access-Control-Max-Age: 3600   
    6）通过url中的片段标识符，就是#后面的内容，页面不会刷新，然后另一个窗口通过监听hashchange事件
    7）WebSocket，一种通信协议，该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。
       请求报文中Origin字段指定服务器是否允许本次通讯。
    

14、css同样会阻塞后面js的执行，其会与后面的js同步下载，但js必须等css执行完才能执行，因为js可能会
    请求样式的信息，现在很多浏览器都有预取功能，会提前把后面的资源下载下来但不会执行。  

15、git rebase
    用来改变提交的历史，即改变分支的基点，一般是为了保持主线提交历史的线性，方便管理，改变基点后，
    分支相当于把自己的修改在主分支上重演一遍（也可以理解为打补丁），改变完基点后就可以进行合并了
    这时候git merge会使用快进的方式进行合并，因为从主干直接到分支，没有三方合并的操作，只是简单的
    移动了head指针。
    git merge 
    也是合并分支，但是却保留了最原始的提交历史，合并时，如果主分支当前的head不是需合并分支的起始点，
    那么这个时候就会进行三方合并，把两分支和他们的共同祖先节点进行合并操作，最后生产新的节点（rebase
    则少了这个操作，并且提交历史呈现一个网状的图，所有用git rebase比较好，但是注意，git rebase不能
    操作已经提交到公开库的分支，因为这样别人有可能已经下载了你之前合并的分支，这个时候别人的记录已经有
    了你最新的提交，如果你再rebase提交，这样别人会把你这个新的节点当成新的分支，这样就会拥有你两份修改。

    git rebase 最好在本地仓库操作，完了才提交到远程。

16、常用的原生js和css操作
     1）获取DOM
        document.getElementById('id');//返回单一node
        document.getElementsByClassName('className');
        document.getElementsByName('nameValue');
        document.getElementsByTagName('span');
        document.querySelector('.className');//返回单一node
        document.querySelectorAll('.className');

      2）css操作
         例如：<p class='class01 class02 class03'></p>   
         var El = document.querySelector('.class01');
         El.className;                        // "class01 class02 class03";
         El.classList;                        // ["class01","class02","class03"];
         El.classList.contains('class02');    //true
         El.classList.add('myClass');         //增加类myClass
         El.className += ' myClass';          //增加类myClass,注意字符串前面的空格
         El.classList.remove('myClass');      //删除类myClass
         El.style.background = "#FF0000";     //单独修改某个内联样式，类似font-size要写成fontSize
                                              //如果是javascript保留字，如float则要写出cssFloat
         El.style.cssText += 'color:red;padding-top:50px;';   //批量增加(可能覆盖)内联样式

      3）读取伪元素内容和属性
          var test = document.querySelector('#test');
          var result = window.getComputedStyle(test, ':before').content;
          var color = window.getComputedStyle(test, ':before').color;      
      4）DOM操作
         El.innerHTML += '<div>new add</div>'; //相当于jq中的append方法，作为最后一个子元素加入
         El.innerHTML  = '<div>new add</div>' + El.innerHTML;//作为第一个子元素加入

         var sub = document.createElement('div');
         var text = document.createTextNode('this is text!');
         sub.appendChild(text);
         El.appendChild(sub); 

17、多行文字居中
     html：<p><span>多行文字居中</span></p>
     1）p{
             display: flex;
             align-items: center;
             width: 600px;
             height: 220px;
             background: #DDD;        
             overflow: hidden;
         }
       优点：简单，父容器可以浮动，可以设定margin，子元素可以任意设定类型。
       缺点：IE10+才支持，移动端可以考虑此方法。
     2）p{
            display: table-cell;
            width: 600px;
            height: 220px;
            background: #DDD;
            vertical-align: middle;
            overflow: hidden;
        }  
        优点是：支持IE8+，子元素display属性的值必须是inline或者inline-block。
        缺点是：父容器不能浮动，margin值不起作用。  
18、jqery中的on和trigger方法是怎么实现的
19、阅读jqery的源码
20、正则表达式的贪婪匹配和非贪婪匹配(非贪婪匹配也叫懒惰匹配)
    1）默认情况下，javascript引擎使用的是贪婪匹配，在匹配成功的情况下，尽可能多的匹配字符
    2）懒惰匹配则是在匹配成功的情况下，尽可能少的匹配
    3）在量词后面加上?可以告诉引擎使用懒惰匹配，量词包括*  +  ?  {n,m}  {n,}
    4）例如：
    'abcabc'.match(/a.*c/);   //匹配'abcabc'
    'abcabc'.match(/a.*?c/);  //匹配'abc'
21、数据驱动和DOM驱动的区别
22、border:0;和border:none;的区别
23、jpg、webp、png、gif的区别
     jpg:采用24位二进制数表示一个像素的颜色，所以大概有1600万种颜色，人的肉眼能分辨的颜色大概是一千万种，这叫
          真彩色，其属于有损压缩，每次保存都会产生数据损失(jpeg artifacts), 故不适合用于多次编辑保存。
          压缩率过高图像会失真，适合于内容图片。
     png:采用8位二进制数来表示一个像素的颜色，故只能表示常用的256种颜色，其属于无损压缩，有透明选项，适合小图标使用。
     gif:一般采用动态图才会用到，如果能用css3搞定的动画，就尽量不要用gif了。
     WebP:具有更优的图像数据压缩算法，能带来更小的图片体积，具备了无损和有损的压缩模式，谷歌浏览支持，其他浏览器呵呵。
24、腾讯页面重构工程师专业题目
    1）结构简洁
    2）样式重用
    3）兼容性
    4）预知交互
    5）把握性能
    6）样式精华高效
    7）注释
    8）扩展性
    9）下游易懂
25、react
26、angular
27、vue
28、原生幻灯片组件
29、原生toast组件